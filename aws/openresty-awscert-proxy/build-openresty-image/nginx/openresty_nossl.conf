upstream target_service {
  server {{TARGET_SERVICE}};
}

#limit_req_zone $binary_remote_addr zone=perip:10m rate={{RATE_REQS_SEC}}r/s;

# Prometheus lua plugin
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/usr/local/openresty/lualib/prometheus/?.lua";
init_by_lua '
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"remoteip", "status"})
    metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"remoteip"})
';
log_by_lua '
    local remoteip = ngx.var.remote_addr
    metric_requests:inc(1, {remoteip, ngx.var.status})
    metric_latency:observe(ngx.now() - ngx.req.start_time(), {remoteip})
';

server {
  server_name _;
  listen 80;
  
  location / {
    #limit_req zone=perip burst=5;
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_pass http://target_service;
    proxy_read_timeout  90;
    if ( $http_x_forwarded_proto != 'https' ) {
      return 301 https://$host$request_uri;
    }
  }
  location /metrics {
        default_type text/plain;
        content_by_lua 'prometheus:collect()';
  }
}
