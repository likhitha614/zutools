upstream target_service {
  server {{TARGET_SERVICE}};
}

#limit_req_zone $binary_remote_addr zone=perip:10m rate={{RATE_REQS_SEC}}r/s;
# Prometheus lua plugin
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/usr/local/openresty/lualib/prometheus/?.lua";
init_by_lua '
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"remoteip", "status"})
    metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"remoteip"})
';
log_by_lua '
    local remoteip = ngx.var.remote_addr
    metric_requests:inc(1, {remoteip, ngx.var.status})
    metric_latency:observe(ngx.now() - ngx.req.start_time(), {remoteip})
';

server {
  server_name _;
  listen 80;
  return 301 https://$host$request_uri;
}

server {
  server_name _; 
  listen 443 ssl;

  ssl on;
  ssl_certificate /etc/secrets/proxycert;
  ssl_certificate_key /etc/secrets/proxykey;
  ssl_dhparam /etc/secrets/dhparam;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:HIGH:!RC4:!MD5:!aNULL:!EDH:!CAMELLIA;
  ssl_prefer_server_ciphers on;
  
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
 
  ssl_session_tickets off;
 
  location / {
      #limit_req zone=perip burst=5;
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        X-Forwarded-Host $http_host;
      proxy_pass              http://target_service;
      proxy_read_timeout      90;
      proxy_redirect          http:// https://;
      #auth_basic              "Restricted";
      #auth_basic_user_file    /etc/secrets/htpasswd; 
  }
    location /metrics {
        default_type text/plain;
        content_by_lua 'prometheus:collect()';
    }
}
